// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sample/proto/sample.proto

package _go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on SampleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SampleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SampleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SampleRequestMultiError, or
// nil if none found.
func (m *SampleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SampleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetId(); val <= 0 || val >= 10000 {
		err := SampleRequestValidationError{
			field:  "Id",
			reason: "value must be inside range (0, 10000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SampleRequestMultiError(errors)
	}
	return nil
}

// SampleRequestMultiError is an error wrapping multiple validation errors
// returned by SampleRequest.ValidateAll() if the designated constraints
// aren't met.
type SampleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SampleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SampleRequestMultiError) AllErrors() []error { return m }

// SampleRequestValidationError is the validation error returned by
// SampleRequest.Validate if the designated constraints aren't met.
type SampleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SampleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SampleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SampleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SampleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SampleRequestValidationError) ErrorName() string { return "SampleRequestValidationError" }

// Error satisfies the builtin error interface
func (e SampleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSampleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SampleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SampleRequestValidationError{}

// Validate checks the field values on SampleResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SampleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SampleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SampleResponseMultiError,
// or nil if none found.
func (m *SampleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SampleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Person

	if len(errors) > 0 {
		return SampleResponseMultiError(errors)
	}
	return nil
}

// SampleResponseMultiError is an error wrapping multiple validation errors
// returned by SampleResponse.ValidateAll() if the designated constraints
// aren't met.
type SampleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SampleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SampleResponseMultiError) AllErrors() []error { return m }

// SampleResponseValidationError is the validation error returned by
// SampleResponse.Validate if the designated constraints aren't met.
type SampleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SampleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SampleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SampleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SampleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SampleResponseValidationError) ErrorName() string { return "SampleResponseValidationError" }

// Error satisfies the builtin error interface
func (e SampleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSampleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SampleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SampleResponseValidationError{}

// Validate checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Person) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Person with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PersonMultiError, or nil if none found.
func (m *Person) ValidateAll() error {
	return m.validate(true)
}

func (m *Person) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Age

	for idx, item := range m.GetEmail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PersonValidationError{
						field:  fmt.Sprintf("Email[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PersonValidationError{
						field:  fmt.Sprintf("Email[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PersonValidationError{
					field:  fmt.Sprintf("Email[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PersonMultiError(errors)
	}
	return nil
}

// PersonMultiError is an error wrapping multiple validation errors returned by
// Person.ValidateAll() if the designated constraints aren't met.
type PersonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PersonMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PersonMultiError) AllErrors() []error { return m }

// PersonValidationError is the validation error returned by Person.Validate if
// the designated constraints aren't met.
type PersonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PersonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PersonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PersonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PersonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PersonValidationError) ErrorName() string { return "PersonValidationError" }

// Error satisfies the builtin error interface
func (e PersonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerson.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PersonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PersonValidationError{}

// Validate checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Email) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Email with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmailMultiError, or nil if none found.
func (m *Email) ValidateAll() error {
	return m.validate(true)
}

func (m *Email) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Domain

	if len(errors) > 0 {
		return EmailMultiError(errors)
	}
	return nil
}

// EmailMultiError is an error wrapping multiple validation errors returned by
// Email.ValidateAll() if the designated constraints aren't met.
type EmailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmailMultiError) AllErrors() []error { return m }

// EmailValidationError is the validation error returned by Email.Validate if
// the designated constraints aren't met.
type EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailValidationError) ErrorName() string { return "EmailValidationError" }

// Error satisfies the builtin error interface
func (e EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailValidationError{}
